# -*- mode:org; epa-file-encrypt-to: ("f.nikolakopoulos@gmail.com") -*-
#+STARTUP: indent
#+STARTUP: hidestars
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t html-scripts:t
#+OPTIONS: html-style:t html5-fancy:t tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.4.50.1 (<a href="http://orgmode.org">Org</a> mode 8.2.6)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[cm-default]{fontspec}                                         
#+LATEX_HEADER: \usepackage{xunicode}                                                     
#+LATEX_HEADER: \usepackage{xltxtra}                                                      
#+LATEX_HEADER: \usepackage{xgreek}                                                                                 
#+LATEX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+SETUPFILE:   /home/quill/public_html/org-html-themes/org/theme-readtheorg-local.setup


* test-list

#+NAME: test append
#+BEGIN_SRC lisp :results output 

(setq l '( 1 2 3 4))
(setq z 10)
(setq start-point (append l `(,z)))
(setq lst (last start-point))
(format t "~a" lst)
#+END_SRC
#+RESULTS: test append
: (10)



* test math functions

#+NAME: test-math-functions-0
#+BEGIN_SRC lisp :results output raw

(setq point3 '(100.0d0 0.0))
(setq point4 '(100.0d0 10.0d0))
(setq v (list point3 point4))
(setq a-angle (* *pi* 0.5d0))
(setq offset -10.0)

(defun print-vector-data (v)
    (let* ((p1 (nth 0 v))
	   (p2 (nth 1 v))
	   (p1x (x-of p1))
	   (p1y (y-of p1))
	   (p2x (x-of p2))
	   (p2y (y-of p2)))
      (progn
	(format t "|start-point:| ~8,4F | ~8,4F |~%" p1x p1y)
	(format t "|end-point:| ~8,4F | ~8,4F |~%" p2x p2y)
	(format t "|direction-angle:| ~8,4F |  |~%" (rad-to-deg(angle-vector v)))
	)))

  (print-vector-data v)

  (setq v2 (vector-offset v offset))

  (print-vector-data v2)

#+END_SRC

#+RESULTS: test-math-functions-0
| start-point:     | 100.0000 |  0.0000 |
| end-point:       | 100.0000 | 10.0000 |
| direction-angle: |  90.0000 |         |
| start-point:     |  90.0000 |  0.0000 |
| end-point:       |  90.0000 | 10.0000 |
| direction-angle: |  90.0000 |         |

#+NAME: test-math-functions
#+BEGIN_SRC lisp :results output raw

    (setq point1 '(100.0d0 0.0))
    (setq point2 '(200.0d0 0.0d0))
    (setq v (list point1 point2))

    (let ((vdir (normal-vector v)))
      (format t "|point1:| ~8,4F | ~8,4F |~%" (x-of point1) (y-of point1))
      (format t "|point2:| ~8,4F | ~8,4F |~%" (x-of point2) (y-of point2))
      (format t "|direction:| ~8,4F |~8,4F  |~%" (x-of vdir) (y-of vdir)))


    (setq point3 '(000.0d0 10.0))
    (setq point4 '(000.0d0 20.0d0))
    (setq v (list point3 point4))

    (let ((vdir (normal-vector v)))
      (format t "|point1:| ~8,4F | ~8,4F |~%" (x-of point3) (y-of point3))
      (format t "|point2:| ~8,4F | ~8,4F |~%" (x-of point4) (y-of point4))
      (format t "|direction:| ~8,4F |~8,4F  |~%" (x-of vdir) (y-of vdir)))


    (setq point3 '(000.0d0 10.0))
    (setq point4 '(000.0d0 -20.0d0))
    (setq v (list point3 point4))

    (let ((vdir (normal-vector v)))
      (format t "|point1:| ~8,4F | ~8,4F |~%" (x-of point3) (y-of point3))
      (format t "|point2:| ~8,4F | ~8,4F |~%" (x-of point4) (y-of point4))
      (format t "|direction:| ~8,4F |~8,4F  |~%" (x-of vdir) (y-of vdir)))

    (setq point3 '(000.0d0 10.0))
    (setq point4 '(000.0d0 -20.0d0))
    (setq v (list point3 point4))
  (setq a-angle (* *pi* 0.5d0))
    (let ((vdir (normal-vector v)))
      (format t "|point1:| ~8,4F | ~8,4F |~%" (x-of point3) (y-of point3))
      (format t "|point2:| ~8,4F | ~8,4F |~%" (x-of point4) (y-of point4))
      (format t "|direction-angle:| ~8,4F |  |~%" (angle-vector v))
      (format t "|direction-angle:| ~8,4F |  |~%" (vector-rotate v a-angle)))


#+END_SRC

#+RESULTS: test-math-functions
| point1:          |                       100.0000 |                         0.0000 |
| point2:          |                       200.0000 |                         0.0000 |
| direction:       |                  (0.0d0 0.0d0) |                  (1.0d0 0.0d0) |
| point1:          |                         0.0000 |                        10.0000 |
| point2:          |                         0.0000 |                        20.0000 |
| direction:       |                  (0.0d0 0.0d0) |  (6.123233995736766d-17 1.0d0) |
| point1:          |                         0.0000 |                        10.0000 |
| point2:          |                         0.0000 |                       -20.0000 |
| direction:       |                  (0.0d0 0.0d0) | (6.123233995736766d-17 -1.0d0) |
| point1:          |                         0.0000 |                        10.0000 |
| point2:          |                         0.0000 |                       -20.0000 |
| direction-angle: |                        -1.5708 |                                |
| direction-angle: | ((0.0d0 10.0) (30.0d0 10.0d0)) |                                |

* test divide function


#+NAME: test-divide-step
#+BEGIN_SRC lisp :results output 

(setq zsafe 50.0)
(setq zstart 15.0)
(setq zend 0.0)
(setq zstep 3.0)

(format t "~a" (helical-z-list zsafe zstart zend zstep))

#+END_SRC

#+RESULTS: test-divide-step
: (50.0 15.0 12.0 9.0 6.0 3.0 0.0 0.0 3.0 9.0 15.0 50.0)


* test step function

#+NAME: test-step-function
#+BEGIN_SRC lisp :results output
  (format t "~a~%"  (step-over 10.0 1.0 -1.5))
  (format t "~a~%"  (step-over 1.0 10.0  1.5))
#+END_SRC

#+RESULTS: test-step-function
: (10.0 8.5 7.0 5.5 4.0 2.5 1.0)
: (1.0 2.5 4.0 5.5 7.0 8.5 10.0)

** test-divide-circle

#+name: test-divide-circle
#+BEGIN_SRC lisp :results output raw

  (loop for i in (divide-circle '(0 0) 280.0d0 16)
        do (format t "| ~8,3F |  ~8,3F | ~%" (car i) (cadr i)))
#+END_SRC

#+RESULTS: test-divide-circle
|  280.000 |   -0.000 |
|  258.686 | -107.151 |
|  197.990 | -197.990 |
|  107.151 | -258.686 |
|   -0.000 | -280.000 |
| -107.151 | -258.686 |
| -197.990 | -197.990 |
| -258.686 | -107.151 |
| -280.000 |    0.000 |
| -258.686 |  107.151 |
| -197.990 |  197.990 |
| -107.151 |  258.686 |
|    0.000 |  280.000 |
|  107.151 |  258.686 |
|  197.990 |  197.990 |
|  258.686 |  107.151 |
|  280.000 |    0.000 |




** test helical drill

#+name: test-helical-drill-point
#+BEGIN_SRC lisp :results output
  (setq z-list '(12.0 9.0 7.5 5.0 3.0 2.0 1.0 0.0 0.0 1.5 2.5 5.0 7.5 10.0 12.0))
  (setq radius 10.0) 
  (setq f- 600.0)
  (setq f+ 600.0)
  (setq point '(0.0d0 0.0d0 0.0d0))
  (setq output-stream *STANDARD-OUTPUT*)
  (helical-drill point z-list radius f- f+ *STANDARD-OUTPUT*)
#+END_SRC

#+RESULTS: test-helical-drill-point
#+begin_example

(helical drilling point: X   0.000 Y   0.000)
G0   X  10.000   Y   0.000   Z  12.000   
G02   X -10.000   Y   0.000   Z   9.000  R  10.000  F600.0 
G02   X  10.000   Y   0.000   Z   7.500  R  10.000  F600.0 
G02   X -10.000   Y   0.000   Z   5.000  R  10.000  F600.0 
G02   X  10.000   Y   0.000   Z   3.000  R  10.000  F600.0 
G02   X -10.000   Y   0.000   Z   2.000  R  10.000  F600.0 
G02   X  10.000   Y   0.000   Z   1.000  R  10.000  F600.0 
G02   X -10.000   Y   0.000   Z   0.000  R  10.000  F600.0 
G02   X  10.000   Y   0.000   Z   0.000  R  10.000  F600.0 
G02   X -10.000   Y   0.000   Z   1.500  R  10.000  F600.0 
G02   X  10.000   Y   0.000   Z   2.500  R  10.000  F600.0 
G02   X -10.000   Y   0.000   Z   5.000  R  10.000  F600.0 
G02   X  10.000   Y   0.000   Z   7.500  R  10.000  F600.0 
G02   X -10.000   Y   0.000   Z  10.000  R  10.000  F600.0 
G1   X   0.000   Y   0.000   Z  12.000   F600.0 
#+end_example

  
** test divide circle

#+name: test-divide-circle-2
#+BEGIN_SRC lisp :results output raw
        (setq center '(0.0 0.0))
        (setq radius 280.0d0)
        (setq trochoidal-width 10.0)
        (setq no-of-points 8)

    (setq couple (point-couples center radius trochoidal-width no-of-points))

    (dotimes (i no-of-points)
      (let* ((i (pop couple))
             (in (car i))
             (out (cadr i)))
        (format t "| ~8,3F |  ~8,3F | | ~8,3F |  ~8,3F |  ~%" (x-of in) (y-of in) (x-of out) (y-of out))))
  #+END_SRC

  #+RESULTS: test-divide-circle-2
  |  280.000 |   -0.000 |   |  290.000 |   -0.000 |
  |  197.990 | -197.990 |   |  205.061 | -205.061 |
  |   -0.000 | -280.000 |   |   -0.000 | -290.000 |
  | -197.990 | -197.990 |   | -205.061 | -205.061 |
  | -280.000 |    0.000 |   | -290.000 |    0.000 |
  | -197.990 |  197.990 |   | -205.061 |  205.061 |
  |    0.000 |  280.000 |   |    0.000 |  290.000 |
  |  197.990 |  197.990 |   |  205.061 |  205.061 |


** test drill function

#+name: helical-drill-test
#+BEGIN_SRC lisp :results output
  (setq z-list '(20.0 10.0 5.0 0.0 5.0 10.0 20.0))
  (setq f- 600.0)
  (setq point '(0.0d0 0.0d0 0.0d0))
  (setq output-stream *STANDARD-OUTPUT*)
  (drill-point point z-list f- f+ *STANDARD-OUTPUT*)
#+END_SRC




** test line 1
We plan to test the trochoidal move on a line across x
#+NAME: test-trochoidal-line
#+BEGIN_SRC lisp :tangle yes :results output file :file test-divide.ngc

          ;;;linear move
    (setq l-step 1.5d0)
          ;;;radius of circle
    (setq radius 1.5d0)
    (setq zi 0.0)
    (setq f- 600)

    (setq start-point '(0.0d0 0.0d0))

    (setq output-stream *STANDARD-OUTPUT*)

    (setq x0 (x-of start-point))
    (setq y0 (y-of start-point))

    (prologue 10000 output-stream)
    (dotimes (n 100)
      (let ((xi (+ x0 (* n l-step)))
            (yi (+ y0 (* n l-step))))
        (linear-move (list xi y0 zi)  f- output-stream)
        (clockwise-move-R (list xi (+ y0 radius radius) zi) radius f- output-stream)
        (clockwise-move-R (list xi (+ y0 0.0) zi) radius f- output-stream)
        ))
  (epilogue output-stream)
#+END_SRC

** test divide circle

#+name: test-divide-circle-2
#+BEGIN_SRC lisp :results output raw
        (setq center '(0.0 0.0))
        (setq radius 280.0d0)
        (setq trochoidal-width 10.0)
        (setq no-of-points 8)

    (setq couple (point-couples center radius trochoidal-width no-of-points))

    (dotimes (i no-of-points)
      (let* ((i (pop couple))
             (in (car i))
             (out (cadr i)))
        (format t "| ~8,3F |  ~8,3F | | ~8,3F |  ~8,3F |  ~%" (x-of in) (y-of in) (x-of out) (y-of out))))
  #+END_SRC

  #+RESULTS: test-divide-circle-2
  |  280.000 |   -0.000 |   |  290.000 |   -0.000 |
  |  197.990 | -197.990 |   |  205.061 | -205.061 |
  |   -0.000 | -280.000 |   |   -0.000 | -290.000 |
  | -197.990 | -197.990 |   | -205.061 | -205.061 |
  | -280.000 |    0.000 |   | -290.000 |    0.000 |
  | -197.990 |  197.990 |   | -205.061 |  205.061 |
  |    0.000 |  280.000 |   |    0.000 |  290.000 |
  |  197.990 |  197.990 |   |  205.061 |  205.061 |




* test input table

We plan to input the data from an org-mode table



* pass variables between src blocks

#+BEGIN_SRC lisp
(setq i 1)
#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC lisp

(print i)
#+END_SRC

#+RESULTS:
: 1





