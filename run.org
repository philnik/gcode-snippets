# -*- mode:org; epa-file-encrypt-to: ("f.nikolakopoulos@gmail.com") -*-
#+STARTUP: indent
#+STARTUP: hidestars
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t html-scripts:t
#+OPTIONS: html-style:t html5-fancy:t tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.4.50.1 (<a href="http://orgmode.org">Org</a> mode 8.2.6)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[cm-default]{fontspec}                                         
#+LATEX_HEADER: \usepackage{xunicode}                                                     
#+LATEX_HEADER: \usepackage{xltxtra}                                                      
#+LATEX_HEADER: \usepackage{xgreek}                                                                                 
#+LATEX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+SETUPFILE:   /home/me/public_html/org-html-themes/org/theme-readtheorg-local.setup

* Drill functions

** Simple-drill-array-on-divide-circle
### file :file test-divide.ngc

#+name: simple-drill-array-on-divide-circle
#+BEGIN_SRC lisp :results value :tangle yes
  (setq output-stream (open "/home/me/lispcnc/test-simple-drill-on-circle-0.ngc"
                            :external-format :utf-8
                            :direction :output :if-does-not-exist :create :if-exists :supersede))
  (setq f- 600.0)
  (setq zsafe 30.0)
  (setq zstart 12.0)
  (setq zend 0.0)

; (setq output-stream *STANDARD-OUTPUT*)

  (setq center '(0.0d0 0.0d0))
  (setq divide-radius 100.0)
  (setq no-of-points 4) 
  (setq point-array (divide-circle center divide-radius no-of-points))

  (prologue 2500 output-stream) 
  (drill-point-array point-array zsafe zstart zend f- f- output-stream)
  (epilogue output-stream)

  (close output-stream)

#+END_SRC

#+RESULTS: simple-drill-array-on-divide-circle
: T


** Helical-drill-array-on-divide-circle
#+name: helical-drill-array-on-divide-circle
#+BEGIN_SRC lisp :results value :tangle yes
  (setq output-stream (open "/home/me/lispcnc/test-helical-drill-on-circle0.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
  (setq zsafe 25.0)
  (setq zstart 15.0)
  (setq zend 0.0)
  (setq zstep 2.0)

  (setq z-list (helical-z-list zsafe zstart zend zstep))

  (setq hole-diameter 10.0d0)
  (setq tool-diameter 3.175)
  (setq path-radius (/ (- hole-diameter tool-diameter) 2.0))

  (setq f- 1600.0)
  (setq center '(0.0d0 0.0d0))
  (setq divide-radius 500.0)
  (setq no-of-points 20) 
  (setq point-array (divide-circle center divide-radius no-of-points))
  (prologue 12000 output-stream) 
  (helical-drill-array point-array zsafe zstart zend zstep path-radius f- output-stream)
  (epilogue output-stream)

  (close output-stream)

#+END_SRC

#+RESULTS: helical-drill-array-on-divide-circle
: T



** Drill array on rectangle
We take the values from the following table:
#+tblname: my-table
|      x |      y |
|--------+--------|
|   47.0 |   47.0 |
| 213.66 |   47.0 |
| 380.33 |   47.0 |
|  547.0 |   47.0 |
|  547.0 | 213.66 |
|  547.0 | 213.66 |
|  547.0 | 380.33 |
|  547.0 |  547.0 |
| 380.33 |  547.0 |
| 213.66 |  547.0 |
|   47.0 |  547.0 |


#+name: test-drill-array
#+BEGIN_SRC lisp :results value :var point-array=my-table :tangle yes
  (setq output-stream (open "/home/me/lispcnc/test-helical-drill-on-array.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
  (setq zsafe 25.0)
  (setq zstart 15.0)
  (setq zend 0.0)
  (setq zstep 2.0)

  (setq hole-diameter 10.0d0)
  (setq tool-diameter 3.175)
  (setq path-radius (/ (- hole-diameter tool-diameter) 2.0))
  (setq f- 600.0)

  (prologue 3000 output-stream) 
  (helical-drill-array point-array zsafe zstart zend zstep  path-radius f- output-stream)
  (epilogue output-stream)
  (close output-stream)


#+END_SRC

#+RESULTS: test-drill-array
: T




** Helical drill on rectangle and polygon
We take the values from the following table:

I decided to create the table:

#+tblname: hello-world 
#+begin_src lisp :results table


(setq a (list (list "x" "y")))
(setq a (append a (list (list "-" "-"))))
(setq a '())
(format nil "x | y~% ")
(loop for i from 1 to 4
      do (let (
	       (x 25)
	       (y (+ 25.0 (* 111.0 i)))
		)
	   (setf a (append a (list (list x y))))))

(loop for i from 1 to 4
      do (let (
	       (y 469.0)
	       (x (+ 25.0 (* 100.0 i)))
		)
	   (setf a (append a (list (list x y))))))

(loop for i from 1 to 4
      do (let (
	       (x 469.0)
	       (y (- 469 (* 111.0 i)))
		)
	   (setf a (append a (list (list x y))))))




a


#+end_src

#+RESULTS: hello-world
|    25 | 136.0 |
|    25 | 247.0 |
|    25 | 358.0 |
|    25 | 469.0 |
| 125.0 | 469.0 |
| 225.0 | 469.0 |
| 325.0 | 469.0 |
| 425.0 | 469.0 |
| 469.0 | 358.0 |
| 469.0 | 247.0 |
| 469.0 | 136.0 |
| 469.0 |  25.0 |


#+begin_src emacs-lisp :var v=hello-world
v
#+end_src

#+RESULTS:
| hello | world |

#+name: test-drill-array
#+BEGIN_SRC lisp :results value :var point-array=hello-world :tangle yes
  (setq output-stream (open "/home/me/lispcnc/test-helical-drill-on-array.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
  (setq zsafe 25.0)
  (setq zstart 15.0)
  (setq zend 0.0)
  (setq zstep 3.0)

  (setq hole-diameter 10.0d0)
  (setq tool-diameter 4.0)
  (setq path-radius (/ (- hole-diameter tool-diameter) 2.0))
  (setq f- 600.0)

  (prologue 3000 output-stream)

  (loop for point in point-array
	do (progn
	     (helical-drill point zsafe zstart zend zstep  path-radius f- output-stream)
	     
	     (let ((polygon-point (list (x-of point)
					(y-of point)
					6.0)))
	       (format output-stream "~%(polygon at:  ~{~a~^ , ~})~%" polygon-point)
	       (gcode_polygon polygon-point
			      8.0 6 output-stream)
	)))

  (epilogue output-stream)
  (close output-stream)


;;;(format t "~{~a~^, ~}" list)

#+END_SRC

#+RESULTS: test-drill-array
: T



* Trochoidal cutting
*** Trochoidal-circle-by-diameters-D-type
#+NAME: D-type-trochoidal 
#+BEGIN_SRC lisp :tangle yes 
  (setq output-stream (open "/home/me/lispcnc/test-D.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
  (setq xystep 3.00d0)
  (setq zstep 4.0)
  (setq zsafe 50.0)
  (setq zstart 12.0)
  (setq zend 0.0)
  (setq fz 2000)
  (setq fxy 2000)
  (setq center '(0.0 0.0))
  (setq tool-diameter 3.175)
  (setq internal-diameter 580.0)
  (setq external-diameter 596.0)

  (trochoidal-data-gcode-prologue
   xystep zstep zsafe zstart zend fz fxy center tool-diameter internal-diameter external-diameter output-stream)

  (external-D-trochoidal-circle
   xystep zstep zsafe zstart zend fz fxy center tool-diameter internal-diameter external-diameter output-stream 1.0d0)
  (epilogue output-stream) 

  (close output-stream)

#+END_SRC

#+RESULTS: D-type-trochoidal
: T



*** Trochoidal circle by diameters circle type
#+NAME: trochoidal circle 
#+BEGIN_SRC lisp :tangle yes 
  (setq output-stream (open "/home/me/lispcnc/test-C.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
  (setq xystep 9.00d0)
  (setq zstep 3.0)
  (setq zsafe 50.0)
  (setq zstart 12.0)
  (setq zend 0.0)
  (setq fz 2000)
  (setq fxy 2000)
  (setq center '(0.0 0.0))
  (setq tool-diameter 3.175)
  (setq internal-diameter 560.0)
  (setq external-diameter 596.0)

  (trochoidal-data-gcode-prologue
   xystep zstep zsafe zstart zend fz fxy center tool-diameter internal-diameter external-diameter output-stream)

  (external-trochoidal-circle
   xystep zstep zsafe zstart zend fz fxy center tool-diameter internal-diameter external-diameter output-stream)
  (epilogue output-stream) 

  (close output-stream)

#+END_SRC

#+RESULTS: trochoidal circle
: T



*** Trochoidal arc by diameters circle type
#+NAME: trochoidal-arc 
#+BEGIN_SRC lisp :tangle yes 
(setq output-stream (open "/home/me/lispcnc/test-arc.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
(setq xystep 10.00d0)
(setq zstep 3.0)
(setq zsafe 50.0)
(setq zstart 12.0)
(setq zend 0.0)
(setq fz 20000)
(setq fxy 20000)
(setq center '(0.0 0.0))
(setq tool-diameter 3.175)
(setq internal-diameter 560.0)
(setq external-diameter 596.0)
(setf start-angle (/ *pi* 2.0))
(setf end-angle (* 1.5 *pi*))
(setf direction 'ccw)

(trochoidal-data-gcode-prologue
 xystep zstep
 zsafe zstart zend
 fz fxy
 center tool-diameter internal-diameter external-diameter
 output-stream)

(external-trochoidal-arc
 xystep zstep
 zsafe zstart zend
 fz fxy
 center tool-diameter internal-diameter external-diameter
 start-angle end-angle direction
 output-stream)

(epilogue output-stream) 

  (close output-stream)

#+END_SRC

#+RESULTS: trochoidal-arc
: T

#+RESULTS: trochoidal circle
: T





*** Trochoidal rectangle
#+NAME: trochoidal_rectangle
#+BEGIN_SRC lisp :tangle yes 
(setq output-stream (open "/home/me/lispcnc/rectangle.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
(setq xystep 1.00d0)
(setq zstep 1.0)
(setq zsafe 50.0)
(setq zstart 12.0)
(setq zend 0.0)
(setq fz 2000)
(setq fxy 2000)
(setq tool-diameter 3.175)
(setq trochoidal-width 8.0)
(setq w 20.0d0)
(setq v (list '(0.0d0 0.0d0) (list w 0.0d0)))
(setq v2 (list (list w 0.0d0) (list w w)))
(setq v3 (list (list w w) (list 0.0d0 w)))
(setq v4 (list (list 0.0d0 w) (list 0.0d0 0.0d0)))

(prologue 8000 output-stream)

(helical-dive xystep zstep zsafe zstart zend fz fxy tool-diameter v trochoidal-width output-stream)
(external-trochoidal-line-2 xystep zstep zsafe zstart zend fz fxy tool-diameter v trochoidal-width output-stream)
(external-trochoidal-line-2 xystep zstep zsafe zstart zend fz fxy tool-diameter v2 trochoidal-width output-stream)
(external-trochoidal-line-2 xystep zstep zsafe zstart zend fz fxy tool-diameter v3 trochoidal-width output-stream)
(external-trochoidal-line-2 xystep zstep zsafe zstart zend fz fxy tool-diameter v4 trochoidal-width output-stream)

(helical-raise xystep zstep zsafe zstart zend fz fxy tool-diameter v4 trochoidal-width output-stream)
(epilogue output-stream) 

(close output-stream)
#+END_SRC

#+RESULTS: trochoidal_line
: T







