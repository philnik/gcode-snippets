# -*- mode:org; epa-file-encrypt-to: ("f.nikolakopoulos@gmail.com") -*-
#+STARTUP: indent
#+STARTUP: hidestars
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t html-scripts:t
#+OPTIONS: html-style:t html5-fancy:t tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.4.50.1 (<a href="http://orgmode.org">Org</a> mode 8.2.6)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[cm-default]{fontspec}                                         
#+LATEX_HEADER: \usepackage{xunicode}                                                     
#+LATEX_HEADER: \usepackage{xltxtra}                                                      
#+LATEX_HEADER: \usepackage{xgreek}                                                                                 
#+LATEX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+SETUPFILE:   /home/quill/public_html/org-html-themes/org/theme-readtheorg-local.setup

* Drill functions


** Simple-drill-array-on-divide-circle
### file :file test-divide.ngc

#+name: simple-drill-array-on-divide-circle
#+BEGIN_SRC lisp :results output 
(setq f- 600.0)
(setq zsafe 30.0)
(setq zstart 12.0)
(setq zend 0.0)

(setq output-stream *STANDARD-OUTPUT*)

(setq center '(0.0d0 0.0d0))
(setq divide-radius 100.0)
(setq no-of-points 4) 
(setq point-array (divide-circle center divide-radius no-of-points))

(prologue 2500 output-stream) 
(drill-point-array point-array zsafe zstart zend f- f- output-stream)
(epilogue output-stream)
#+END_SRC

#+RESULTS: simple-drill-array-on-divide-circle
#+begin_example
(prologue)
 M03 S2500 
 
 (end of prologue)

(drilling point: X 100.000 Y   0.000)
G0   X 100.000   Y   0.000   Z  30.000   
G0   X 100.000   Y   0.000   Z  12.000   
G1   X 100.000   Y   0.000   Z   0.000   F600.0 
G1   X 100.000   Y   0.000   Z  12.000   F600.0 
G0   X 100.000   Y   0.000   Z  30.000   

(drilling point: X   0.000 Y 100.000)
G0   X   0.000   Y 100.000   Z  30.000   
G0   X   0.000   Y 100.000   Z  12.000   
G1   X   0.000   Y 100.000   Z   0.000   F600.0 
G1   X   0.000   Y 100.000   Z  12.000   F600.0 
G0   X   0.000   Y 100.000   Z  30.000   

(drilling point: X-100.000 Y   0.000)
G0   X-100.000   Y   0.000   Z  30.000   
G0   X-100.000   Y   0.000   Z  12.000   
G1   X-100.000   Y   0.000   Z   0.000   F600.0 
G1   X-100.000   Y   0.000   Z  12.000   F600.0 
G0   X-100.000   Y   0.000   Z  30.000   

(drilling point: X  -0.000 Y-100.000)
G0   X  -0.000   Y-100.000   Z  30.000   
G0   X  -0.000   Y-100.000   Z  12.000   
G1   X  -0.000   Y-100.000   Z   0.000   F600.0 
G1   X  -0.000   Y-100.000   Z  12.000   F600.0 
G0   X  -0.000   Y-100.000   Z  30.000   

  (epilogue) 
 M05
 M30
 
 (end of program)
 %%
#+end_example

** Helical-drill-array-on-divide-circle
#+name: helical-drill-array-on-divide-circle
#+BEGIN_SRC lisp :results output file :file ~/test-drill-2.ngc

(setq zsafe 25.0)
(setq zstart 15.0)
(setq zend 0.0)
(setq zstep 2.0)
		   
(setq z-list (helical-z-list zsafe zstart zend zstep))
(setq radius 5.0) 
(setq f- 1600.0)
(setq output-stream *STANDARD-OUTPUT*)

(setq center '(0.0d0 0.0d0))
(setq divide-radius 500.0)
(setq no-of-points 20) 
(setq point-array (divide-circle center divide-radius no-of-points))
(prologue 12000 output-stream) 
(helical-drill-array point-array zsafe zstart zend zstep radius f- output-stream)
(epilogue output-stream)
#+END_SRC

#+RESULTS: helical-drill-array-on-divide-circle
[[file:~/test-drill-2.ngc]]


** Drill array on rectangle
We take the values from the following table:
#+tblname: my-table
|      x |      y |
|--------+--------|
|   47.0 |   47.0 |
| 213.66 |   47.0 |
| 380.33 |   47.0 |
|  547.0 |   47.0 |
|  547.0 | 213.66 |
|  547.0 | 213.66 |
|  547.0 | 380.33 |
|  547.0 |  547.0 |
| 380.33 |  547.0 |
| 213.66 |  547.0 |
|   47.0 |  547.0 |



#+name: test-drill-array
#+BEGIN_SRC lisp :results output :var point-array=my-table
    (setq z-list '(10.0 0.0  2.5  7.5  12.0))
    (setq radius 10.0) 
    (setq f- 600.0)
    (setq output-stream *STANDARD-OUTPUT*)

    (helical-drill-array point-array z-list radius f- f- output-stream)
#+END_SRC

#+RESULTS: test-drill-array
#+begin_example

(helical drilling point: X   0.000 Y   0.000)
G0   X  10.000   Y   0.000   Z  10.000   
G02   X -10.000   Y   0.000   Z   0.000  R  10.000  F600.0 
G02   X  10.000   Y   0.000   Z   2.500  R  10.000  F600.0 
G02   X -10.000   Y   0.000   Z   7.500  R  10.000  F600.0 
G1   X   0.000   Y   0.000   Z  12.000   F600.0 

(helical drilling point: X   1.000 Y   1.000)
G0   X  11.000   Y   1.000   Z  10.000   
G02   X  -9.000   Y   1.000   Z   0.000  R  10.000  F600.0 
G02   X  11.000   Y   1.000   Z   2.500  R  10.000  F600.0 
G02   X  -9.000   Y   1.000   Z   7.500  R  10.000  F600.0 
G1   X   1.000   Y   1.000   Z  12.000   F600.0 

(helical drilling point: X   2.000 Y   2.000)
G0   X  12.000   Y   2.000   Z  10.000   
G02   X  -8.000   Y   2.000   Z   0.000  R  10.000  F600.0 
G02   X  12.000   Y   2.000   Z   2.500  R  10.000  F600.0 
G02   X  -8.000   Y   2.000   Z   7.500  R  10.000  F600.0 
G1   X   2.000   Y   2.000   Z  12.000   F600.0 
#+end_example


* Trochoidal cutting
*** Trochoidal-circle-by-diameters-D-type
#+NAME: D-type-trochoidal 
#+BEGIN_SRC lisp :tangle yes 
  (setq output-stream (open "/home/me/lispcnc/test-D.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
  (setq xystep 3.00d0)
  (setq zstep 4.0)
  (setq zsafe 50.0)
  (setq zstart 12.0)
  (setq zend 0.0)
  (setq fz 2000)
  (setq fxy 2000)
  (setq center '(0.0 0.0))
  (setq tool-diameter 3.175)
  (setq internal-diameter 580.0)
  (setq external-diameter 596.0)

  (trochoidal-data-gcode-prologue
   xystep zstep zsafe zstart zend fz fxy center tool-diameter internal-diameter external-diameter output-stream)

  (external-D-trochoidal-circle
   xystep zstep zsafe zstart zend fz fxy center tool-diameter internal-diameter external-diameter output-stream 1.0d0)
  (epilogue output-stream) 

  (close output-stream)

#+END_SRC



*** Trochoidal circle by diameters circle type
#+NAME: trochoidal circle 
#+BEGIN_SRC lisp :tangle yes 
  (setq output-stream (open "/home/me/lispcnc/test-C.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
  (setq xystep 9.00d0)
  (setq zstep 3.0)
  (setq zsafe 50.0)
  (setq zstart 12.0)
  (setq zend 0.0)
  (setq fz 2000)
  (setq fxy 2000)
  (setq center '(0.0 0.0))
  (setq tool-diameter 3.175)
  (setq internal-diameter 560.0)
  (setq external-diameter 596.0)

  (trochoidal-data-gcode-prologue
   xystep zstep zsafe zstart zend fz fxy center tool-diameter internal-diameter external-diameter output-stream)

  (external-trochoidal-circle
   xystep zstep zsafe zstart zend fz fxy center tool-diameter internal-diameter external-diameter output-stream)
  (epilogue output-stream) 

  (close output-stream)

#+END_SRC


*** Trochoidal line
#+NAME: trochoidal_line
#+BEGIN_SRC lisp :tangle yes 
(setq output-stream (open "/home/me/lispcnc/line.ngc" :direction :output :if-does-not-exist :create :if-exists :supersede))
(setq xystep 3.00d0)
(setq zstep 4.0)
(setq zsafe 50.0)
(setq zstart 12.0)
(setq zend 0.0)
(setq fz 2000)
(setq fxy 2000)
(setq tool-diameter 3.175)
(setq trochoidal-width 80.0)
(setq v (list '(0.0d0 0.0d0) '(100.0d0 0.0d0)))

(prologue 8000 output-stream)

(external-trochoidal-line xystep zstep zsafe zstart zend fz fxy tool-diameter v trochoidal-width output-stream)

(epilogue output-stream) 

(close output-stream)
#+END_SRC







