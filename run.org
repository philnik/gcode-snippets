# -*- mode:org; epa-file-encrypt-to: ("f.nikolakopoulos@gmail.com") -*-
#+STARTUP: indent
#+STARTUP: hidestars
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t html-scripts:t
#+OPTIONS: html-style:t html5-fancy:t tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.4.50.1 (<a href="http://orgmode.org">Org</a> mode 8.2.6)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[cm-default]{fontspec}                                         
#+LATEX_HEADER: \usepackage{xunicode}                                                     
#+LATEX_HEADER: \usepackage{xltxtra}                                                      
#+LATEX_HEADER: \usepackage{xgreek}                                                                                 
#+LATEX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+SETUPFILE:   /home/quill/public_html/org-html-themes/org/theme-readtheorg-local.setup

* Drill functions


** Simple-drill-array-on-divide-circle
### file :file test-divide.ngc

#+name: simple-drill-array-on-divide-circle
#+BEGIN_SRC lisp :results output 
(setq f- 600.0)
(setq zsafe 30.0)
(setq zstart 12.0)
(setq zend 0.0)

(setq output-stream *STANDARD-OUTPUT*)

(setq center '(0.0d0 0.0d0))
(setq divide-radius 100.0)
(setq no-of-points 4) 
(setq point-array (divide-circle center divide-radius no-of-points))

(prologue 2500 output-stream) 
(drill-point-array point-array zsafe zstart zend f- f- output-stream)
(epilogue output-stream)
#+END_SRC

#+RESULTS: simple-drill-array-on-divide-circle
#+begin_example
(prologue)
 M03 S2500 
 
 (end of prologue)

(drilling point: X 100.000 Y   0.000)
G0   X 100.000   Y   0.000   Z  30.000   
G0   X 100.000   Y   0.000   Z  12.000   
G1   X 100.000   Y   0.000   Z   0.000   F600.0 
G0   X 100.000   Y   0.000   Z  30.000   

(drilling point: X   0.000 Y 100.000)
G0   X   0.000   Y 100.000   Z  30.000   
G0   X   0.000   Y 100.000   Z  12.000   
G1   X   0.000   Y 100.000   Z   0.000   F600.0 
G0   X   0.000   Y 100.000   Z  30.000   

(drilling point: X-100.000 Y   0.000)
G0   X-100.000   Y   0.000   Z  30.000   
G0   X-100.000   Y   0.000   Z  12.000   
G1   X-100.000   Y   0.000   Z   0.000   F600.0 
G0   X-100.000   Y   0.000   Z  30.000   

(drilling point: X  -0.000 Y-100.000)
G0   X  -0.000   Y-100.000   Z  30.000   
G0   X  -0.000   Y-100.000   Z  12.000   
G1   X  -0.000   Y-100.000   Z   0.000   F600.0 
G0   X  -0.000   Y-100.000   Z  30.000   

  (epilogue) 
 M05
 M30
 
 (end of program)
 %%
#+end_example


** Helical-drill-array-on-divide-circle
#+name: helical-drill-array-on-divide-circle
#+BEGIN_SRC lisp :results output 

(setq zsafe 25.0)
(setq zstart 15.0)
(setq zend 0.0)
(setq zstep 6.0)
		   
(setq z-list (helical-z-list zsafe zstart zend zstep))
(setq radius 10.0) 
(setq f- 1600.0)
(setq output-stream *STANDARD-OUTPUT*)

(setq center '(0.0d0 0.0d0))
(setq divide-radius 100.0)
(setq no-of-points 4) 
(setq point-array (divide-circle center divide-radius no-of-points))
;;(prologue 12000 output-stream) 
(helical-drill-array point-array zsafe zstart zend radius f- output-stream))
(epilogue output-stream)
#+END_SRC

#+RESULTS: helical-drill-array-on-divide-circle
#+begin_example

(helical drilling point: X 100.000 Y   0.000)
G0   X 100.000   Y   0.000   Z  25.000   
G0   X 110.000   Y   0.000   Z  15.000   
G02   X  90.000   Y   0.000   Z  12.000  R  10.000  F1600.0 
G02   X 110.000   Y   0.000   Z   6.000  R  10.000  F1600.0 
G02   X  90.000   Y   0.000   Z   0.000  R  10.000  F1600.0 
G02   X 110.000   Y   0.000   Z   0.000  R  10.000  F1600.0 
G02   X  90.000   Y   0.000   Z   3.000  R  10.000  F1600.0 
G02   X 110.000   Y   0.000   Z  15.000  R  10.000  F1600.0 
G0   X 100.000   Y   0.000   Z  25.000   

(helical drilling point: X   0.000 Y 100.000)
G0   X   0.000   Y 100.000   Z  25.000   
G0   X  10.000   Y 100.000   Z  15.000   
G02   X -10.000   Y 100.000   Z  12.000  R  10.000  F1600.0 
G02   X  10.000   Y 100.000   Z   6.000  R  10.000  F1600.0 
G02   X -10.000   Y 100.000   Z   0.000  R  10.000  F1600.0 
G02   X  10.000   Y 100.000   Z   0.000  R  10.000  F1600.0 
G02   X -10.000   Y 100.000   Z   3.000  R  10.000  F1600.0 
G02   X  10.000   Y 100.000   Z  15.000  R  10.000  F1600.0 
G0   X   0.000   Y 100.000   Z  25.000   

(helical drilling point: X-100.000 Y   0.000)
G0   X-100.000   Y   0.000   Z  25.000   
G0   X -90.000   Y   0.000   Z  15.000   
G02   X-110.000   Y   0.000   Z  12.000  R  10.000  F1600.0 
G02   X -90.000   Y   0.000   Z   6.000  R  10.000  F1600.0 
G02   X-110.000   Y   0.000   Z   0.000  R  10.000  F1600.0 
G02   X -90.000   Y   0.000   Z   0.000  R  10.000  F1600.0 
G02   X-110.000   Y   0.000   Z   3.000  R  10.000  F1600.0 
G02   X -90.000   Y   0.000   Z  15.000  R  10.000  F1600.0 
G0   X-100.000   Y   0.000   Z  25.000   

(helical drilling point: X  -0.000 Y-100.000)
G0   X  -0.000   Y-100.000   Z  25.000   
G0   X  10.000   Y-100.000   Z  15.000   
G02   X -10.000   Y-100.000   Z  12.000  R  10.000  F1600.0 
G02   X  10.000   Y-100.000   Z   6.000  R  10.000  F1600.0 
G02   X -10.000   Y-100.000   Z   0.000  R  10.000  F1600.0 
G02   X  10.000   Y-100.000   Z   0.000  R  10.000  F1600.0 
G02   X -10.000   Y-100.000   Z   3.000  R  10.000  F1600.0 
G02   X  10.000   Y-100.000   Z  15.000  R  10.000  F1600.0 
G0   X  -0.000   Y-100.000   Z  25.000   
#+end_example


** Drill array on rectangle
We take the values from the following table:
#+tblname: my-table
|   x |   y |
|-----+-----|
| 0.0 | 0.0 |
| 1.0 | 1.0 |
| 2.0 | 2.0 |

#+name: test-drill-array
#+BEGIN_SRC lisp :results output :var point-array=my-table
    (setq z-list '(10.0 0.0  2.5  7.5  12.0))
    (setq radius 10.0) 
    (setq f- 600.0)
    (setq output-stream *STANDARD-OUTPUT*)

    (helical-drill-array point-array z-list radius f- f- output-stream)
#+END_SRC

#+RESULTS: test-drill-array
#+begin_example

(helical drilling point: X   0.000 Y   0.000)
G0   X  10.000   Y   0.000   Z  10.000   
G02   X -10.000   Y   0.000   Z   0.000  R  10.000  F600.0 
G02   X  10.000   Y   0.000   Z   2.500  R  10.000  F600.0 
G02   X -10.000   Y   0.000   Z   7.500  R  10.000  F600.0 
G1   X   0.000   Y   0.000   Z  12.000   F600.0 

(helical drilling point: X   1.000 Y   1.000)
G0   X  11.000   Y   1.000   Z  10.000   
G02   X  -9.000   Y   1.000   Z   0.000  R  10.000  F600.0 
G02   X  11.000   Y   1.000   Z   2.500  R  10.000  F600.0 
G02   X  -9.000   Y   1.000   Z   7.500  R  10.000  F600.0 
G1   X   1.000   Y   1.000   Z  12.000   F600.0 

(helical drilling point: X   2.000 Y   2.000)
G0   X  12.000   Y   2.000   Z  10.000   
G02   X  -8.000   Y   2.000   Z   0.000  R  10.000  F600.0 
G02   X  12.000   Y   2.000   Z   2.500  R  10.000  F600.0 
G02   X  -8.000   Y   2.000   Z   7.500  R  10.000  F600.0 
G1   X   2.000   Y   2.000   Z  12.000   F600.0 
#+end_example


* Trochoidal cutting
** Trochoidal-circle-external-array-610
  
#+NAME: trochoidal-circle-array-610-data
#+HEADER: :tangle yes :noweb yes
#+HEADER: :results output 
#+HEADER: :comments both :cache yes :session step
#+BEGIN_SRC lisp  
(setq output-stream *STANDARD-OUTPUT*)
(setq l-step 20.0d0)
(setq zi 0.0)
(setq f- 900)
(setq center-array (list '(0.0 0.0) '(100 0.0) '(100.0 100.0) '(100.0 0.0)))
(setq center '(0.0 0.0))
(setq tool-diameter 50d0)
(setq internal-radius (/ 100.0 2.0d0))
(setq trochoidal-width 40)
(setq external-radius (+ internal-radius trochoidal-width))
(setq z-list-in '(50.0 18.0 16.0 15.0 12.0 8.0 5.0 0.0 0.0))
#+END_SRC

#+RESULTS[4c92bf8419c841ab74c60eaf4f85ed0616867e47]: trochoidal-circle-array-610-data


#+NAME: trochoidal-circle-array-610-print
#+HEADER: :tangle yes :noweb yes
#+HEADER: :results output raw 
#+HEADER: :comments both :cache yes :session step
#+BEGIN_SRC lisp  
(format t "|l-step|~f| | mm|~%" l-step)
(format t "|zi |~f|  |mm|~%" zi)
(format t "|f- |~f| | mm/min|~%" f-)
(format t "|----|~%")
(loop for center in center-array
      do (format t "|center:|~f|~f |mm x mm|~%" (car center) (cadr center)))
(format t "|----|~%")
(format t "|tool-diameter |~f| | mm|~%" tool-diameter)
(format t "|trochoidal-width|~f|| mm| ~%" trochoidal-width)
(format t "|internal-radius|~f| | mm |~%" internal-radius)
(format t "|external-radius|~f| | mm|~%" external-radius)
(format t "|----|~%")
(format t "|internal-cutting-radius|~f| | mm |~%" (- internal-radius (/ tool-diameter 2.0)))
(format t "|external-cutting-radius|~f| | mm|~%" (+ external-radius (/ tool-diameter 2.0)))
(format t "|internal-cutting-daimeter|~f| | mm |~%" (* 2.0 (- internal-radius (/ tool-diameter 2.0))))
(format t "|external-cutting-diameter|~f| | mm|~%" (* 2.0(+ external-radius (/ tool-diameter 2.0))))
(format t "|----|~%")
#+END_SRC

#+RESULTS[3372bd16d8c879731f6cb246e2c4494f0d81e22b]: trochoidal-circle-array-610-print
| l-step                    |  20.0 |       | mm      |
| zi                        |   0.0 |       | mm      |
| f-                        | 900.0 |       | mm/min  |
|---------------------------+-------+-------+---------|
| center:                   |   0.0 |   0.0 | mm x mm |
| center:                   | 100.0 |   0.0 | mm x mm |
| center:                   | 100.0 | 100.0 | mm x mm |
| center:                   | 100.0 |   0.0 | mm x mm |
|---------------------------+-------+-------+---------|
| tool-diameter             |  50.0 |       | mm      |
| trochoidal-width          |  40.0 |       | mm      |
| internal-radius           |  50.0 |       | mm      |
| external-radius           |  90.0 |       | mm      |
|---------------------------+-------+-------+---------|
| internal-cutting-radius   |  25.0 |       | mm      |
| external-cutting-radius   | 115.0 |       | mm      |
| internal-cutting-daimeter |  50.0 |       | mm      |
| external-cutting-diameter | 230.0 |       | mm      |
|---------------------------+-------+-------+---------|

#+NAME: trochoidal-circle-array-610-gcode
#+HEADER: :tangle yes :noweb yes
#+HEADER: :results output  file :file trochoidal-circle-610-diameter-internal.ngc
#+HEADER: :comments both :cache yes :session step
#+BEGIN_SRC lisp
<<trochoidal-circle-array-610-data>>
(external-trochoidal-circle-array l-step zi f- center-array tool-diameter internal-radius trochoidal-width z-list-in output-stream)
#+END_SRC

#+RESULTS[92a743ac2ed8481f50672b63413ca201b10983a5]: trochoidal-circle-array-610-gcode
[[file:trochoidal-circle-610-diameter-internal.ngc]]

** Trochoidal-circle-internal-500

#+NAME: test-trochoidal-internal-circle-500
#+BEGIN_SRC lisp :tangle yes :results output file :file trochoidal-circle-500-diameter-internal.ng :comments both :cache yes
  (setq output-stream *STANDARD-OUTPUT*)
  (setq l-step 2.0d0)
  (setq zi 0.0)
  (setq f- 900)
  (setq center '(0.0 0.0))

  (setq internal-radius (/ 496 2.0d0))
  (setq tool-diameter 3.175)
  (setq trochoidal-width 4.5)
  (setq z-list-in '(50.0 18.0 16.0 15.0 12.0 8.0 5.0 0.0 0.0))

  (internal-trochoidal-circle l-step zi f- center tool-diameter internal-radius trochoidal-width z-list-in output-stream)

#+END_SRC

#+RESULTS[222ecd476c0e42a1f06bb25d357716aaa2ad6720]: test-trochoidal-internal-circle-500
[[file:trochoidal-circle-500-diameter-internal.ng]]

** Trochoidal-circle-internal-496

#+NAME: test-trochoidal-internal-circle-496
#+BEGIN_SRC lisp :tangle yes :results output file :file trochoidal-circle-496-diameter-internal.ng :comments both :cache yes :session step
  (setq output-stream *STANDARD-OUTPUT*)
  (setq l-step 2.0d0)
  (setq zi 0.0)
  (setq f- 900)
  (setq center '(0.0 0.0))

  (setq internal-radius (/ 495 2.0d0))
  (setq tool-diameter 3.175)
  (setq trochoidal-width 4.5)
  (setq z-list-in '(50.0 18.0 16.0 15.0 12.0 8.0 5.0 0.0 0.0))

  (internal-trochoidal-circle l-step zi f- center tool-diameter internal-radius trochoidal-width z-list-in output-stream)

#+END_SRC

#+RESULTS[4a9abd43523f61620b0f54d74445fb50a0c7d751]: test-trochoidal-internal-circle-496
[[file:trochoidal-circle-496-diameter-internal.ng]]


** trochoidal-circle
** Trochoidal-circle-internal-500

#+NAME: test-trochoidal-circle
#+BEGIN_SRC lisp :tangle yes :results output file :file patoura-8mm-drum-scrubber.ngc
(setq output-stream *STANDARD-OUTPUT*)
(setq l-step 3.00d0)
(setq zi 0.0)
(setq f- 900)
(setq center '(0.0 0.0))


(setq tool-diameter 3.175)
(setq diameter-inside 580.0)
(setq diameter-outside 596.0)

;;;
(setq radius (/(+ diameter-inside tool-diameter)2.0))

(setq radius (/(+ diameter-inside tool-diameter)2.0))

(setq trochoidal-width (- (/(- diameter-outside diameter-inside)2.0) tool-diameter))

(setq z-list-in '(50.0 18.0 16.0 15.0 12.0 8.0 5.0 0.0 0.0))

(trochoidal-data-gcode-prologue l-step zi f- center  tool-diameter radius trochoidal-width z-list-in output-stream)

(prologue 8000 output-stream)
(trochoidal-circle l-step zi f- center tool-diameter radius trochoidal-width z-list-in output-stream)
(epilogue output-stream) 


#+END_SRC

#+RESULTS: test-trochoidal-circle
[[file:patoura-8mm-drum-scrubber.ngc]]





